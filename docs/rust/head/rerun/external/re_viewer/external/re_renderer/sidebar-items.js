window.SIDEBAR_ITEMS = {"enum":[["ColorMap",""]],"fn":[["colormap_inferno_srgb","Returns sRGB polynomial approximation from Inferno color map, assuming `t` is normalized."],["colormap_magma_srgb","Returns sRGB polynomial approximation from Magma color map, assuming `t` is normalized."],["colormap_plasma_srgb","Returns sRGB polynomial approximation from Plasma color map, assuming `t` is normalized."],["colormap_srgb",""],["colormap_turbo_srgb","Returns sRGB polynomial approximation from Turbo color map, assuming `t` is normalized."],["colormap_viridis_srgb","Returns sRGB polynomial approximation from Viridis color map, assuming `t` is normalized."],["get_filesystem","Returns the recommended filesystem handle for the current platform."],["grayscale_srgb","Returns an sRGB gray value, assuming `t` is normalized."],["new_recommended_file_resolver","Returns the recommended `FileResolver` for the current platform/target."]],"macro":[["include_file","A macro to read the contents of a file on disk, and resolve #import clauses as required."]],"mod":[["config",""],["importer",""],["mesh",""],["renderer",""],["resource_managers","Resource managers are concerned with mapping (typically) higher level user data to their Gpu representation."],["view_builder",""]],"struct":[["AutoSizeConfig","How [`Size::AUTO`] is interpreted."],["Color32","This format is used for space-efficient color representation (32 bits)."],["DebugLabel","Label for resources. Optimized out in release builds."],["FileResolver","The `FileResolver` handles both resolving import clauses and doing the actual string interpolation."],["FileServer","A file server capable of watching filesystem events in the background and resolve #import clauses in files."],["ImportClause","A pre-parsed import clause, as in `#import <something>`."],["LineStripBuilder",""],["LineStripSeriesBuilder","Builder for a vector of line strips, making it easy to create [`crate::renderer::LineDrawData`]."],["PointCloudBatchBuilder",""],["PointCloudBuilder","Builder for point clouds, making it easy to create [`crate::renderer::PointCloudDrawData`]."],["RenderContext","Any resource involving wgpu rendering which can be re-used across different scenes. I.e. render pipelines, resource pools, etc."],["Rgba","0-1 linear space `RGBA` color with premultiplied alpha."],["SearchPath","Specifies where to look for imports when both absolute and relative resolution fail."],["Size","A size of something in either world-units, screen-units, or unsized."],["WgpuResourcePoolStatistics",""]],"trait":[["FileSystem","A very limited filesystem, just enough for our internal needs."]],"type":[["Buffer",""],["DepthOffset","Depth offset used to resolve z-fighting between 2d primitives."],["RecommendedFileResolver","The recommended `FileResolver` type for the current platform/target."]]};